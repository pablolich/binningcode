My goal is now to find the merged data in the directory where it is. Then write a code on python to do what sheila's code on IDL does. 

First, I need to load the file to python. For this I am going to importe and usethe the astropy.io.fits library 

I have already done that. However, I am working only in the terminal because I don't know how to compile my program.

I have discovered that the fits file has 535 objets in it. Each object has within it 71 objects, including strings, arrays, and integers

I need to identify which of this objects are which, in order to plot the bpt diagram. Lots of these 71 objects (parameters from the galaxy, I guess) have been zeroed out, just like Sheila wrote in her email. Particularly, only 7 objects from all those are non-zero. However, in her email, Sheila mentions 13 entrances. I am not sure what is she refering to here. 

Anyway, I have to find the data to plot the BPT diagram. Thus, I need NII, HALFA, OIII and HBETA. 

The non-zero arrays are of length 21: eureka.

some of the other 71 elements are 21 x 6. I am not sur
e of what these are, and what is the diference with arrays of the form 21 x 1.

So, I talked to sheila and she told me that I need to identify the lines myself. The lables are there, I just need to find them. a[].headers or something should be tried. I could also loop along the structure to extract all the arrays. 

I have discovered that a.info() gives me a general view of what the whole structure looks like. It has two main entrances, one is called PRIMARY (a[0]) and the second one doesn't have a name. PRIMARY is of type primary, and the second one is BinTable. I am not sure of what the cards are, but the primary has only 4 and the second one has 166. The primary doesn't have dimensions, while the secondary is a matrix made of 535 rows and 71 columns. Now there is a specific format for this matrix, for example, lets examine the first row. Note that the first a[0] has no dimension, so it only has headers?
a[1] has everything in data. Lets see what a[1] has to say about the headers. Eureka!
The flux of NII 6584 is here:  TTYPE14 = 'F3_NII_6584' 

After a couple hours of reviewing literature about fits file handling with astro.io.fits, from AstroPy package, I have discovered that a few words in the command line can take you where you wanna go. If you want to extract the array linked with NII, just do 

a[1].data[1]['F3_NII_6584']

as I can see, that array has been zeroed out.

To find more NII data hidden in the fits file, I execute the command a[1].data.columns. To get what the code in sheilas email is getting, I have to look at the F_NII_6584 column, which turns out to be also an all-zero array. 

Lets loop through the 535 galaxies to get all these arrays, and check if there are any non zero ones. 
I have done this for all the lines involved in the BPT diagram. Turns out that there where indeed non-zero elements in these arrays. Now, I will extract them, and follow what the code in sheila's email does.

What I am doing now is trying to tranlate the entire code Sheila sent me to python code. This shouldn't take me much longer, since I already know how things work. 
Tomorrow I have to write the errors that are left, for the O_III line, and start taking zeroes off my data. Then I will be ready to plot the BPT diagram.

I realized that there is no need to loop over the galaxies. This data can be treated as a whole. I just learned what the arrays mean. So for every galaxy we measure 21 positions. So we have 21 times 535 numbers corresponding to NII line measurements. From these measurements we are trying to extract those which verify that S/N > 3. Those will be consider as lines, and will be plotted in the BPT diagram. The BPT diagram should contain no more than 535 * 21 points. We expect to have several points that correspond to a single galaxy. If a galaxy is AGN, would this imply that all of its points in the BPT diagram are in the AGN area? if not, and only a fraction of them are, do we still say that that galaxy is AGN?

I have concluded the process of plotting the BPT diagram. What follows is a summary of the process. 

First, we loaded the data, a fits file. I named 'x' the part of it containing the numerical information. I only use fluxes and errors corresponding to NII  OIII Halpha and Hbeta lines, and the parameters from 8 line fitting corresponding to those same lines. The previously mentioned wavelengths have each one asociated an array of 21 slots (length of the slit). There is one slit per galaxy. Therefore we have information corresponding to 21 * 535 points.

Second, I compute the noise, in order to select the lines that have a S/N ratio higher than 3. This  is not very restrictive if we have in mind that some astronomers impose S/N > 5. After that, I plot the relation O_{III}/H_{\beta} and N_{III}/H_{\alpha} to obtain the BPT diagram from the fluxes manually integrated.

Third, I select the same lines, but this time, they have been integrated through an 8 line fit. Therefore, the value of the flux changes a little. Specifically, we can see from the BPT diagram that the points derived with the fit are all a bit lowered with respect to the manually integrated ones. This implies that both OIII and NII fluxes tend to decrease when we fit the line, instead of manually integrate it. I am not sure why that happens. 

Due to the migration from IDL to Python, several minor changes to the original code have been made regarding the dimensions of the multidimensional arrays we are working with. The BPT diagram has also been enhanced using python's matplotlib capabilities. 

Let me identify in python the 21 array corresponding to the fluxes for every HB line from a certain galaxy. I know that those fluxes have been obtained extracting a different amount of pixels (not 3, as recomended in the binning code plan). The way this pixels have been selected is given in the vectors bmin and bmax. I want to compute that to see what numbers do I obtain. bmin and bmax form, when put together to define the limits of every pixel division, a 21 array. So for example, the first line would be in the pixels [center-2*reff, center-1.5*reff]. I need to find the code where this is written, to actually compute this cuantity and see what units is it expressed in. Sheila told me that the row ranges where in the vertical axis, while I thought it would be in the horizontal one... 

Fragment of the code explained.

name = x.NAME
selg = np.where(name == 'rf0283')
FHB = x.F_HB[selg]
ccen = x.CCEN[selg]
reff = x.REFF[selg]
bmin = ccen + np.array([-2.0,-1.5,-1.25,-1.0,-0.75,-0.5,-0.4,-0.3,-0.2,-0.1,0,0, 0.1,0.2,0.3,0.4,0.5,0.75,1.0,1.25,1.5])*reff
bmax = ccen + np.array([-1.5,-1.25,-1.0,-0.75,-0.5,-0.4,-0.3,-0.2,-0.1,0,0, 0.1,0.2,0.3,0.4,0.5,0.75,1.0,1.25,1.5,2.0])*reff

bmin and bmax are the boxes in which we separate our data. Then they fit the each box to generate fluxes. These fluxes are stored in FHB, and they correspond to the 21 positions of the slit. Each one is an HB line. Now, my goal is to take this fluxes and bin them together so that we reach a specific S/N. 

######

Fri Sep 28 13:27:51 EDT 2018

My next task is to calculate s_n0 and iterate till I reach the desired one. signals are directely added, while errors are sqared added. Afer that, I have to write the function so that it selects the rows that the user specifies, and tries to reach a certain s/n from that selection. What if i reach more than that? Wouldn't it be easier to tell the code not to use specific lines, and try to reach always the maximum s/n? In fact, why don't we bin up all the lines to reach maximum s/n? what do we loose? We probably loose data, because we are binnning it. Indeed, we lose the possibility of obtaining gradients.


#######

Mon Oct  1 12:36:10 EDT 2018

So, I have fluxes corresponding to each position on the slit. What I need to do now is to asociate to each slit a velocity, to then de-redshift. Anyway, there is something I don't get. The binning code plan says that the list of sets of rows to bin, is each one an array. I am not sure about that. Each row is a flux, which is only one number. I am also not sure why do I have to know the row ranges for the 21 bins. Finally, when we sum signals, we are summing fluxes. The value of this fluxes is independant of its position on the lambda axis, so in order to achieve a certain S/N we would only need to sum fluxes, without de-redshifting them right?
Should I build a table with RC (y : row #, x : pixel position of velocity)

I am going to load the actual file with which I am going to work with.

I have had a meeting with Sheila that has been very enlightning. Many things have been understood, but they have to be put down, let rest.

Plan for this week: I will start coding the part of binning options. This part can be divided into 4 smaller parts. 

     1. If I am given a list of sets of rows to bin, the code will just sum fluxes to obtain the total S. It will cuadrature sum the errors, to obtain the resultant N, and finally will calculate the resluting S/N.

     2. If i am given a S/N target and line(s) to consider for that. As an optional arg, the code will accept the max number of bins to bin. 

Number 1 is already done. 

Thu Oct  4 16:57:01 EDT 2018


Lets try number 2.  I am done. What the code does is: it identifies the maximum s/n lines measured, and it sums them until s/n target is reached. The output of the function  is either a list, containing the rows to bin to achieve s/n preset, or a number, containting the s/n relsulting from the binning of the specified rows. 

Now I will start performing the binning. 

There are several things I want to add to my code in order for it to be more general. First, I want to find a way to let the user specify what line does he/she want to use for binning (HA, HB,...). For that I need to find a way to feed strings to my code. I could ask this to sheila. I also need to figure out the other 2 options of binning. Eithre summing including the center, and moving outwards, or same thing but excluding the center. Are these the other 2 options? Why would we exclude the center, AGN?. Also, if we exclude it, why only the 10th row? Maybe the AGN affects to other lines too, not only the central one. 

Lets start figuring out the perfoming of the binning. Lets supose that we want a s/n higher than 20. For that, we would bin, acording to my function, the rows 10, 8, and 5. how Do we perform the binning?
First we load hdul, which is the array containing all the intensities captured by the ccd camera. It is an array of 348 x 2045, which is pretty good. I am at UNC, it was expected. 

I have the lines I should bin in a scale from 1 to 21. The array is bigger than that, because fluxes have been computed fitting a broad range of rows. If the correspondance was 1 to 1, we would not have a posible fit. We need more points. This points are within the row ranges that sheila sent to me a week ago. For example: two rows that have to be binned are 10 and 8 (remember to star counting from 0! this is weird python). Well, these rows correspond to ranges 172-172 and 164.93-168.46, respectively.
Before performing the binning I need to deredshift the rows, so that they mach with each other, and I can just directly add them. 
The 10th line its already in its place. Because it is the center, and it does not rotate, nor it is redshifted. To bring the 8th row, back to its rest wavelength, we have to now which lambda is it in. Then we will subtract that, using the multiplicative trasformation law. This is going well, I am happy.


#####################


Fri Oct  5 11:26:53 EDT 2018
 

Completed my research log for these two weeks
I am binning only adyacent rows. Starting from the center, say I want to bin the 10th with the 11th row. The 11th row corresponds to 172-175.54 on the array. This can be found at a wavelength of... I need to look at the velocity, which can be found at a[1].

I have realized that my code was incomplete. I have to bin ALL the rows, not only the central and adyacents till I reach s/n. All the rows need to be binned so that all of them reach that s/n target. I will keep on working on that on monday. 


I am trying to create arg, so that it bins the middle with the next and previuos lines, alternatively. Something weird is happening. Once I create this, and bin the middle row with the side rows alternatively, I will work my way out to the ends separately, and consecutivley. No need to alternate. parriba va con parriba, y pabajo va con pabajo. 

Mon Oct  8 17:24:14 EDT 2018

I have discovered pdb, it is such a useful tool!. I have debugged my code. Now it does the following. First it bins the middle, and gets the middle row range needed to reach the desired s/n. It gives also the s/n reached. Note that s/n reached >= s/n target. Second, it bins the left part (or lower indexes) and it spits out another row range and the s/n reached. There is an option in which binning up all the rows is not enough to achieve s/n target. In this case, the code will print a warning. So far, this is the only option I have coded. Same thing for the right part (or upper indexes). 

My goal for wednseday is to allow the right and left side to create more than one binning row ranges. Thus, I have to somewhat loop both of the whiles. So that a rowrange is created when the target s/n is reached, and the proces is started again. 


Thu Oct 11 18:03:52 EDT 2018

I have completed that task.

My goal for tomorrow is to add those that dont reach s/n to the one adyacents. After that, I want to start with deredshifting, and finally I will subtract AGN...


Fri Oct 12 11:26:41 EDT 2018

I actually need to go through my code and clean it up, step by step. Make it simpler and well commented. Maybe I should do that right now. 
I should include an option in my code that lets the user to specify which lines he/she wants to perform the binning on. The user would input a string. 
I also need to find a way to identify AGN and exclude them from my points of analysis. I will do that later on. 

Question: Sometimes if I bin a line to another one, my s/n decreases. If this happens, it would be better not to bin it, right? Does this always happens? Should I discard the end rows if they don't add up to 4?
My question was answered, and the issue was consequently adressed

My goal for monday is bin up the whole galaxy. Select the best lines, those which don't add up noise. and add them all up, no upper limit. 
After that I will be finally able to start with the redshiftiiiiiing

Mon Oct 15 12:47:13 EDT 2018

I have completed the best line selecting. Now my code has three options.

       1.	 Binning up rows that the user selects, give back the signal to noise 
       2. 	 Bin up rows so that every new binned row has a s/n equal or higher than a user specified target.
       3. 	 Bin up the best  rows, not consecutively. This means, bin up until only noise is being added. 

Tomorow I will come back, and I will start thinking about the damned redshifting. I have been avoiding it until now, but it is time to face my enemy once and for all. 


Tue Oct 16 15:40:03 EDT 2018

Today I am going to star coding to actually perform the binning. 
First I need to apply a linear transformation to transform the x axis into lambdas. 

I have made some progress in my goal of deredshifting. 
My goal for next week will be to work on identifying the exact Hbeta lambda, to obtain the zcosm. From there, I would be able to obtain v dopler, and therfore tranport all the lamdas to their good place, this is, the frame of reference of the obeserver, at rest. Check the last line written in the whiteboard!

#################################


Mon Oct 22 09:19:05 EDT 2018


I just did a calculation in the whiteboard that should lead to the right deredshifting. My calculation involves the use of peakfinding, which I doubt is a reliable method to identify lines. But I will go with that for now, and then I might obtain lambda obs through any other way. 

I only need to put all velocities to the same level! (the central one). Once I do that, I will be done with the deredshift. 


Thu Oct 25 15:26:27 EDT 2018


The user needs to specify better the ranges he/she wants to merge, I need to code that. 

So, what I am first going to do is: collect the ranges I have to bin the data in. After that, I have to substract the redshift. Put the velocities at the velocity of the center, for each row range. Say I want to bin the 10th through the 14th row. I first dislplace all the velocities to the center, with a simple substraction. Then , and only then, I can sum each row directly. After that I will compute again the signal to noise.

I need to improve my code in several ways. First, list of sets of rows to bin (can be discontinuous). Second, optional max number of bins to bin. Third, line(s) to consider for s/n target. 

I don't understand what do they mean by interpolate onto integer y. Does this mean having a continuous in the position of the galaxy?

I also don't understand what do they mean when they say fit. I think what they mean is that I have to take the new line of the binned positions of the galaxy, and fit it with a gaussian. From there I should be able to obtain the s/n. s would be the heigh of the gaussian, and n would be the mean of the fluctuations. What region should I choose to calcule the mean? How broad to assure stability? I could test it with a given case. 

First I am going to deredshift an perform the binning according to binning options above (steps b and c) After that I will fit and calcule s/n to see if I got it right. If for some reason I didn't, should I keep binning and reevaluating until I achieve it?

I am fucked up. When I deredshift the rows, I use a multiplicative factor. If the row was originaly blueshifted with respect the center, I need that factor to be greater than one, so it redshifts it back to the center. By doing this, I am streching the scale. Terefore, I am creating points that the center row is not going to have. That is when interpolation comes in. I need to interpolate those point that the center doesnt have to mach the points that the redshifted line has because it has been streched. In this proces, I need to conserve the flux. This means that I can't add photons to the original number of photons. Sheila told me that I should look up interpolation with flux conservartion


Fri Oct 26 12:58:45 EDT 2018


Today I face a new problem; it refers to point a of the binninbg code plan. Interpolating onto integer y, optionally smooth RC. What this means is that I need to get the velocities of the 21 positions of the galaxy and interpolate linearly between each point so that I can obtain velocities associated with each pixel. Should I do it linear (not smooth RC at all), or should I try a more complex function. Maybe an arctangent... Is there any literature about fitting RC with analytical functions? 


Mon Oct 29 11:21:56 EDT 2018


Thu Nov  1 16:24:43 EDT 2018


I have managed to shift all the line wavelengths to the center. Now what I plan to do is to sum them up, considering the interpolation that needs to be done, with flux conservation. 

Mon Nov 12 15:29:35 EST 2018

I have finished the rebinning. Thanks to Nate and a very useful webpage. Now I intend to clean my code and organize it in modules. I have solved minor bugs on option onw of the binninopt code. Great day, by the way.

##################################

Mon Nov 26 11:51:39 EST 2018

I have formalized a question for Sheila. I need to find a way of writing my deredshifted lines to a fits file. Lets do that right now. After,  I am going to start to create a structure for my code. I amgoing to define the functions that perform the interpolation, and the one that performs the binning. Interpolation comes first, so 

Note that a prebinning has been performed prior to the dredshift. This means that the flux output is going to be a different array than the raw data. If we want to recycle the fits file, and rewrite on it, we need to perform the binning first, and then change the prebinned non dedoplershifted lines for the prebinned dedoplershifted lines. 


Thu Nov 29 10:36:29 EST 2018


Minor bugs on my code have been corrected. Now the binning to a target S/N in the center is not performed adding rows alternatively from right and left, but instead, every time a left row is added, a right one is added too.
I have been able to generate a fits file out of the code that does the deredshift. This file is fed into the binning code so that it performs the binning. 
I have generalized my binning code for any line and any galaxy.

My next goal is to perform the binning on the generated fits file

I have done this. 

My next goal is to acctually organize the code, and then start with the agn

###########################

Mon Jan 14 14:55:20 EST 2019

I have created the input data. Now I need to run it through the code bit by bit in order to make sure it works well with it. Particularly I am creating a function out of interpolation.py so that I can call it from the main function.


Thu Jan 17 17:26:22 EST 2019

I have got the OPTION 1. I just need to actually sum the rows so that they are binned.


Fri Jan 18 16:37:49 EST 2019

I have gone through the code using the fake data and it looks like it is working fine now. I have also implemented a tolerance in OPTION 3 so the end points of the binned array can differ a little from the s/n target.

I have also performed the binning in the spectrum with all the necesary corrections. 

I need to perform the correction on the fluxes and perform the binning on the fluxes!!


Thu Jan 24 09:46:18 EST 2019


Everything seems to work. Fluxes and spectrum in the third option need to be binned. 

Reorganized the code so that it has a more natural order// it is more readable.

I am worrying about first point. If it is worse than what it was before... tomorrow I will worry about the last point.


###########################


Mon Jan 28 12:54:34 EST 2019


I have implemented the center subtraction in case of positive AGN flag. 

Fixed unexpected bugs that arose in my interpolation code. 

I havent done the research log and now I don't know what things have I done.;



###########################

Fri Feb  8 10:12:06 EST 2019

The code now gives one more output element. This how the binning ends up being for the spectrum rows. The spectrum rows were obtained by applying a transformation involving the center of the galaxy and the effective radius. If the user wants to know the binning in arcsecs, he needs to apply the inverse transformation to those numbers to obtain arcsecs back. 	

The code now gives one more output element. This how the binning ends up being for the spectrum rows. The spectrum rows were obtained by applying a transformation involving the center of the galaxy and the effective radius. If the user wants to know the binning in arcsecs, he needs to apply the inverse transformation to those numbers to obtain arcsecs back. 	



###########################

Mon Feb 11 15:15:52 EST 2019

Finalized my input example.

Started the code that analyses all the galaxies. 

Stuck in a very weird error. run anaylisi.py to check it visually and investigate. 

solved the issue by working with np.arrays first, and finally transforming to DataFrame.

Applied the code to one galaxy and different lines. 

I need to implement the code for all the galaxies, and store the results in a fits.Table.

Learned how to handel errors when a function is called. Except, try...

Applied code to all galaxies with no spectrum and opt 1, binning on HB

Generated a list with all listb from all galaxies.

Fixed bug concerning the negative SN (it came from lines that only have one flux, and this one is negative).

Implemented flagging when fluxes are negative. Diferent flag is reported when the line is not HB. This has been done in the wrapper code. 